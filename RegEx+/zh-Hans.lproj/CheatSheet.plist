<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>metacharacters</key>
	<array>
		<dict>
			<key>exp</key>
			<string>\a</string>
			<key>des</key>
			<string>匹配一个警报声, \u0007</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\A</string>
			<key>des</key>
			<string>匹配输入的开端。和 ^ 不同的是，\A 不会匹配换行后的开端。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\b, 在 [集合] 外</string>
			<key>des</key>
			<string>当前位置是词语边界时匹配。词语边界是指词语 (\w) 和非词语 (\W) 字符之间的界限，这种边界会忽略连字符。为了更好地使用词语边界，请打开『使用 unicode 词语边界』选项。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\b, 在 [集合] 内</string>
			<key>des</key>
			<string>匹配一个退格, \u0008.</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\B</string>
			<key>des</key>
			<string>当前位置不是词语边界时匹配。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\cX</string>
			<key>des</key>
			<string>匹配一个 control-X 字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\d</string>
			<key>des</key>
			<string>匹配任何符合 Unicode 通用类别的数字字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\D</string>
			<key>des</key>
			<string>匹配任何不为数字的字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\e</string>
			<key>des</key>
			<string>匹配一个 ESCAPE, \u001B。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\E</string>
			<key>des</key>
			<string>终止一个 \Q ... \E 元字符引用序列。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\f</string>
			<key>des</key>
			<string>匹配换页符, \u000C。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\G</string>
			<key>des</key>
			<string>当前位置是上一个匹配的结束位置时匹配。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\n</string>
			<key>des</key>
			<string>匹配一个换行符, \u000A。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\N{UNICODE CHARACTER NAME}</string>
			<key>des</key>
			<string>匹配 Unicode 命名字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\p{UNICODE PROPERTY NAME}</string>
			<key>des</key>
			<string>匹配任意有指定 Unicode 属性的字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\P{UNICODE PROPERTY NAME}</string>
			<key>des</key>
			<string>匹配任意不包括指定 Unicode 属性的字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\Q</string>
			<key>des</key>
			<string>开始元字符引用序列，直到遇到 \E。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\r</string>
			<key>des</key>
			<string>匹配一个 &lt;CR&gt; 回车, \u000D.</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\s</string>
			<key>des</key>
			<string>匹配一个空白字符，它的定义是 [\t\n\f\r\p{Z}]。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\S</string>
			<key>des</key>
			<string>匹配一个非空白字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\t</string>
			<key>des</key>
			<string>匹配一个横向 TAB 缩进，\u0009。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\uhhhh</string>
			<key>des</key>
			<string>匹配 hex 值为 hhhh 的字符串。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\Uhhhhhhhh</string>
			<key>des</key>
			<string>匹配 hex 值为 hhhhhhhh 的字符串。尽管最大的 Unicode 值是 \U0010ffff，但还是要提供完整的八个十六进制数字。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\w</string>
			<key>des</key>
			<string>匹配一个词语字符，它的字符定义是 [\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}]。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\W</string>
			<key>des</key>
			<string>匹配一个非词语字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\x{hhhh}</string>
			<key>des</key>
			<string>匹配 hex 值为 hhhh 的字符串，可以是一到六位的十六进制数字。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\xhh</string>
			<key>des</key>
			<string>匹配 hex 值为 hh 的两位十六进制数字对应的字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\X</string>
			<key>des</key>
			<string>匹配一个字符簇（Grapheme Cluster）。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\Z</string>
			<key>des</key>
			<string>当前位置是输入的结尾时匹配，但仅匹配到行尾标识前，如果有的话。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\z</string>
			<key>des</key>
			<string>当前位置是输入的结尾时匹配。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\n</string>
			<key>des</key>
			<string>换行引用。无论第 n 个捕获组匹配到什么，n 必须是一个 ≥ 1 并 ≤ 总捕获数的数字。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\0ooo</string>
			<key>des</key>
			<string>匹配一个八进制字符。ooo 为一个到三个八进制数字。0377 是有效的最大八进制字符。前置的零是必须的；它将八进制常量与之后的引用值区分开来。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>[pattern]</string>
			<key>des</key>
			<string>匹配任何在这个方括号内的字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>.</string>
			<key>des</key>
			<string>匹配所有字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>^</string>
			<key>des</key>
			<string>匹配行首。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>$</string>
			<key>des</key>
			<string>匹配行尾。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>\</string>
			<key>des</key>
			<string>转义后续字符。有些字符必须转义后才能被当成字面量使用，如 * ? + [ ( ) { } ^ $ | \ . /</string>
		</dict>
	</array>
	<key>operators</key>
	<array>
		<dict>
			<key>exp</key>
			<string>|</string>
			<key>des</key>
			<string>可选匹配。A|B 表示是 A 或者是 B 的一个字符。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>*</string>
			<key>des</key>
			<string>匹配零次或多次，优先匹配多次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>+</string>
			<key>des</key>
			<string>匹配一次或多次，优先匹配多次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>?</string>
			<key>des</key>
			<string>匹配零到一次，优先匹配一次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n}</string>
			<key>des</key>
			<string>明确匹配 n 次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n,}</string>
			<key>des</key>
			<string>匹配最少 n 次，最多无限次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n,m}</string>
			<key>des</key>
			<string>匹配 n 到 m 次，优先匹配尽可能多的次数，但不会超过 m 次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>*?</string>
			<key>des</key>
			<string>匹配零次或多次，尽可能少匹配。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>+?</string>
			<key>des</key>
			<string>匹配一次或多次，尽可能少匹配。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>??</string>
			<key>des</key>
			<string>匹配零次或一次，尽可能少匹配。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n}?</string>
			<key>des</key>
			<string>明确匹配 n 次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n,}?</string>
			<key>des</key>
			<string>匹配至少 n 次，但不超过整体模式匹配的要求。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n,m}?</string>
			<key>des</key>
			<string>匹配 n 到 m 次，尽可能少匹配，但不少于 n 次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>*+</string>
			<key>des</key>
			<string>匹配零次或以上。第一次遇到时，尽量多匹配，即使整体匹配失败，也不要用较少的次数重试（独占模式）。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>++</string>
			<key>des</key>
			<string>匹配一次或多次，独占模式。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>?+</string>
			<key>des</key>
			<string>匹配零次或一次，独占模式。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n}+</string>
			<key>des</key>
			<string>明确匹配 n 次。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n,}+</string>
			<key>des</key>
			<string>匹配至少 n 次，独占模式，匹配得越多越好。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>{n,m}+</string>
			<key>des</key>
			<string>匹配 n 到 m 次，独占模式，匹配得越多越好。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(...)</string>
			<key>des</key>
			<string>圆括号匹配。整个表达式匹配结束后，圆括号内的子表达式所捕获到的区域能从匹配信息中单独获得。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?:...)</string>
			<key>des</key>
			<string>非捕获圆括号。匹配括号内冒号之后的表达式但不做捕获，无法从匹配信息中获得，某些时候比捕获圆括号更加高效。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?&gt;...)</string>
			<key>des</key>
			<string>原子匹配圆括号。括号子表达式的第一次匹配是唯一一次尝试；如果没有导致整体模式匹配，则搜索匹配回到 &quot;(?&gt;&quot; 之前的位置。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?# ... )</string>
			<key>des</key>
			<string>自由格式的注释 (?# 注释 ).</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?= ... )</string>
			<key>des</key>
			<string>向后断言。当括号内的表达式在当前输入位置匹配时生效，但不移动输入位置。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?! ... )</string>
			<key>des</key>
			<string>否定的向后断言。当括号内的表达式在当前输入位置不匹配时生效。不移动输入位置。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?&lt;= ... )</string>
			<key>des</key>
			<string>向前断言。如果括号内的表达式与当前输入位置之前的文本相匹配，且匹配的最后一个字符是当前位置之前的输入字符，则生效，且不改变输入位置。向前断言模式匹配的字符串长度不能是无限制的（没有 * 或 + 运算符）。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?&lt;! ... )</string>
			<key>des</key>
			<string>否定的向前断言。如果括号内的表达式与当前输入位置之前的文本不匹配，则生效，匹配的最后一个字符是当前位置之前的输入字符。不改变输入位置。否定的向前断言模式匹配的字符串长度不能是无限制的（没有 * 或 + 运算符）。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?ismwx-ismwx: ... )</string>
			<key>des</key>
            <string>标志设置。在启用或禁用指定的标志时评估括号内的表达式。这些标志在标志选项中定义。例如，(?i:Aa) 启用不区分大小写，(?-i:Aa) 禁用不区分大小写。</string>
		</dict>
		<dict>
			<key>exp</key>
			<string>(?ismwx-ismwx)</string>
			<key>des</key>
			<string>标志设置。更改标志设置。更改适用于设置后的模式部分。例如，(?i) 改变为不区分大小写的匹配。标志在标志选项中定义。</string>
		</dict>
	</array>
</dict>
</plist>
